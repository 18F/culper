package twofactor

import (
	"encoding/base32"
	"os"
	"testing"
)

var tests = []struct {
	secret  []byte
	account string
	token   string
	base64  string
}{
	{[]byte("secret"), "bryan", "814628", "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAFaElEQVR4nOzdwU7tNhRA0VK9//9lOqzUDIhS+ziXvdYYcnnQLauWc/zn+/v7L6j6+/QPACcJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0v5seu7X19emJ9+xauLvnX/Fnc+6PufZT3jnOau+5s6nT9o0xdkKQJoASBMAaQIgTQCk7doFutp3F9O+3Yk7+yf7rNo72ucT/6b/YQUgTQCkCYA0AZAmANLmdoGunv2f/tlzPqvOzDz7t9/ZFzq7U3T2b/qAFYA0AZAmANIEQJoASDu5C/SJnu0dPXtL65l9+0u/khWANAGQJgDSBECaAEizC/Svffsek/tC75/w8ypWANIEQJoASBMAaQIg7eQu0ORpk31vaT2zal9o33ttz3zcCSIrAGkCIE0ApAmANAGQNrcL9LbzJ/tu1/qtX3P1tr/pA1YA0gRAmgBIEwBpAiDt6+MOb6yybxLOqh2Vs/swkf8wrACkCYA0AZAmANIEQNquXaB9OyGT85n37cO87Y71yd/Yq1gBSBMAaQIgTQCkCYA0Z4H+r2e/wLNvcq36ea5WffqqJ//ICkCaAEgTAGkCIE0ApM2dBbqaPOdzx+RexL7fzx2rzjid3QFbwgpAmgBIEwBpAiBNAKTNTYd+9n/xd75r1R7Cql2XO58++X7cnSdffeLbcA9YAUgTAGkCIE0ApAmAtJM3xU/e3j45LWfVLsf73/+6evacg/OFrACkCYA0AZAmANIEQNrb5wLtm9h8du70vie//2uuzAWCMwRAmgBIEwBpAiBt7izQ5PtNd578thvBfsfdXi/f87myApAmANIEQJoASBMAabt2gSbf8dk382ff/Jx986uffdeqN+/umPyN/cgKQJoASBMAaQIgTQCk7doF2jdn5mry9Muq73r/22fPrNo3cxYIJgiANAGQJgDSBEDayZviV9m3p/HM2dNBkbu9VrECkCYA0gRAmgBIEwBpc9Oh980Fujo7tfhtN3l94lQib4TBBAGQJgDSBECaAEg7ORdocs/nanJy0b6zSc/mYK/6rLPPWcIKQJoASBMAaQIgTQCkzd0RdrXqlMjkeZhX7WAMvxF2x6pTPeYCwQQBkCYA0gRAmgBIm5sOfTV5RmVy+vEq++4+O3tj2uSTf2QFIE0ApAmANAGQJgDS5t4Iu2NyQvLkPJ87n77qOZO3sz0z+bbgj6wApAmANAGQJgDSBEDayZvin33N5A3vV/t2eFa9JzU5E2nfv8IbYTBBAKQJgDQBkCYA0t41Hfr9M21WfdfVvmnVZ9+Ye/lEJisAaQIgTQCkCYA0AZB2ci7Q5KmeVXss7z+JtMqq3/PkXWwPWAFIEwBpAiBNAKQJgLR3zQVaZd+0nLPO3om/b/7Sne/axApAmgBIEwBpAiBNAKTN3RQ/OW342ddMzlVe9ebU5O7W5BtqY6wApAmANAGQJgDSBEDa3C7Q1eTdVXd2S95/m/yqmdt3vG1SkLlAsJ4ASBMAaQIgTQCkndwFmrRvWvUz++5QW3Uy6o633QT3gBWANAGQJgDSBECaAEir7AJN3sM+uXd052v2/cz7dpycBYIJAiBNAKQJgDQBkHZyF+jsfJjJ8zCrvG1O0b7zVM4CwQQBkCYA0gRAmgBIm9sFOnsn19umQ9+xaqLOqk/f5+Bt8lYA0gRAmgBIEwBpAiDt61UXNsEwKwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgLR/AgAA///8av8OitItMQAAAABJRU5ErkJggg=="},
	{[]byte("702387654342348"), "paul", "525516", "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"},
	{[]byte("⌘⌘⌘⌘⌘"), "alan", "63750", "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAFbElEQVR4nOzdzW7jNhhA0bqY93/ldF91oRL8c+45eyvxDC6IfKDIPz8/P39B1d+nfwE4SQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZD2Z9FzP5/Poie/8Tzx9/n7rDsVeOxnvfkXG3vOrG962//pFFYA0gRAmgBIEwBpAiBt1RToaefUZexTb2ZHs4zNfN78zmOfGpsd3fZ/OsAKQJoASBMAaQIgTQCk7ZsCPY39pT9r8jBryvHmW6zbHTTrU2f3Cx28rd0KQJoASBMAaQIgTQCknZwC7TRr98us963GdvW8eQ7/ixWANAGQJgDSBECaAEirTIHWvRW1zqwJz9nThC5nBSBNAKQJgDQBkCYA0k5OgXbOGcbO/Dn7JtfY7zzrU2O+bnZkBSBNAKQJgDQBkCYA0vZNgc6+uzRrL9CsU5TX/T5vrHs/7utYAUgTAGkCIE0ApAmAtM/Xbd6Y5ex97m/s/FlZVgDSBECaAEgTAGkCIG3VXqD795asm/mcPXf6zZOfdn6Lq+4RswKQJgDSBECaAEgTAGm33xQ/6wausU+tm3u8uRHsd+wFumrm82QFIE0ApAmANAGQJgDS7rojbN1+oVmnQ8+y86b4Wbtxzv4se4FgPgGQJgDSBECaAEhbNQVadx7ybW9yrTPrW8z6XrM+ddUeJysAaQIgTQCkCYA0AZB28nToszdMzXrXbNbulzfW/c5jz3lad5aRvUAwnwBIEwBpAiBNAKTddTr0mJ0nG1++s2Xpm2473/ayFwh2EABpAiBNAKQJgLST5wLNmqjsnDjNmvnMej9u5z6f++99G2AFIE0ApAmANAGQJgDSVr0Rtm5aMus5t51EffZtr1lmzXzsBYIdBECaAEgTAGkCIG3f6dBP686C3jlfOuu2WdbZJw+wApAmANIEQJoASBMAaXfdFD9m3d6bs+c8r7uZ/bb9Qgff8rMCkCYA0gRAmgBIEwBpJ0+HXneq89POPTOznvzG2ETl8rN6drICkCYA0gRAmgBIEwBp+/YCrZsLjc091k2lxsyazNx2n/vlEycrAGkCIE0ApAmANAGQtu9coJ1TjrHn7Dyf+XecsfPmm15+tpIVgDQBkCYA0gRAmgBI2/dG2Nin1r01NjY/WXfD+9PO8452fos33BEGOwiANAGQJgDSBEDavjfCZs0Z1r23NWvysG5a8nXvW/2ndecvDbACkCYA0gRAmgBIEwBp33dH2LqzaGbtz5l13/2bnz7rLbZ1nxpjLxDsIADSBECaAEgTAGknT4de9+SdN4vNcnafz6+c8LxhBSBNAKQJgDQBkCYA0j5X/Um+zrrThMZ++hvrbvJa99N3vsE3hRWANAGQJgDSBECaAEi763ToWXZOFcZmGt94j9i6PVcH50JWANIEQJoASBMAaQIg7eTp0LPc9ubUuv0w627yemPd/6C9QHCGAEgTAGkCIE0ApJ08Hfr+96Ru21O0c8/M2dnRtm9qBSBNAKQJgDQBkCYA0r7vjrDb7JyWrNtTNGbWTiR7geAMAZAmANIEQJoASKtMgc7uq9m5f2nWVGrsBvz776D/FysAaQIgTQCkCYA0AZB2cgp09nqyWROMnTe877yhbOw5O0+9nsIKQJoASBMAaQIgTQCk7ZsCnf3bf2yCcXYuNGtKtvO86LEdRAdZAUgTAGkCIE0ApAmAtM9Vf5LDZlYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBp/wQAAP//R7G6MrbcMUQAAAAASUVORK5CYII="},
	{[]byte("000000"), "john", "343152", "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAFeElEQVR4nOzdUY7bNhRA0U6R/W85/Y8KRBD4SNn3nO8Zy016QeSBIn/9/v37H6j69/QXgJMEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAab+GPvfn52fok++4nvj7tu9zdecbPvucVecfv//P8AErAGkCIE0ApAmANAGQNjUFupq7i2nV/OTZs5598tysZuedV2f/TpewApAmANIEQJoASBMAafumQFfP/qW/aury7Fl3dhmt+pk732fVtOTsfqGDt7VbAUgTAGkCIE0ApAmAtJNToJ2eTWaunv3Wqp/Z+Z0jrACkCYA0AZAmANIEQFplCrTK3F6gq7kdRM+e9ZWsAKQJgDQBkCYA0gRA2skp0M45w51pybOJyqq3tOa+4U4fNzuyApAmANIEQJoASBMAafumQGdvmLrauavn7GlC33pr2BJWANIEQJoASBMAaQIgbWoK9LY9IWdv4PqOO9bf9ne6hBWANAGQJgDSBECaAEibmgLN7au586yruaffedbZz7nzX7rzvvud/2/8lRWANAGQJgDSBECaAEj7hjfCnk0e7lj1TtYzq5519n75s3+Gf2UFIE0ApAmANAGQJgDS9r0Rdnbnz52fmbsF/uwNXHP3iH3ibO0PVgDSBECaAEgTAGkCIO3tN8Wveudo7vtc7Xy7atWZ0nOTojufc3BKZgUgTQCkCYA0AZAmANJOngt057ee/czV3Fk9O99mmntH7I65CZhzgeAMAZAmANIEQJoASHv7uUBn76XaeX7OHWf3+cxxLhCcIQDSBECaAEgTAGk/2/75f/a29KtV71LNPf3Zb829MXd2lmUvEKwnANIEQJoASBMAafveCLuaO2fmjp33ba06ZfqZVVOXnffCb2MFIE0ApAmANAGQJgDSpvYCvW3nz9XcPOdtJ0jf+ZxVXnXy8x1WANIEQJoASBMAaQIg7V13hO3cf3Ln6c8++dlZPTvft7rjbSdReyMM1hMAaQIgTQCkCYC0d02Brnaen/NswvPMqhnL3PtWO3/r4O4gKwBpAiBNAKQJgDQBkHbydOi5d7LmnD3DeedvPbPzxKElrACkCYA0AZAmANIEQNq+KdD/PHvjKTevOpF4s0+cSm1jBSBNAKQJgDQBkCYA0t51U/zcLpG5SdHZG8qe2Xk69J2nuykezhAAaQIgTQCkCYC0t98Uv/OM4rl3qXaeTT13Mvad7/NxrACkCYA0AZAmANIEQNrb3wjbecrN23YirTJ3gvTVq878ucMKQJoASBMAaQIgTQCkvX0v0Nyzdp4mdHZ2tPNMpJfPfK6sAKQJgDQBkCYA0gRA2sm9QDvN3VC2c6fNHW+bXO18q+4BKwBpAiBNAKQJgDQBkHZyL9CcZxODnTdezc1Y5vY47Xw/bhsrAGkCIE0ApAmANAGQNjUFutp57s2dp7//lOnrb62aOH3H7qAlrACkCYA0AZAmANIEQNq+KdDV2dvS73zy9Ru+ah/L6Dk8c+dFzz3rASsAaQIgTQCkCYA0AZB2cgp01qppyc6Dlc6eL3S182axIVYA0gRAmgBIEwBpAiCtMgWaO8N51Y6mnW97zb2h9v7dU3+wApAmANIEQJoASBMAaSenQDt30czNWM6ed7RqujV3ltHLWQFIEwBpAiBNAKQJgLSpm+LfdkfY3JRj7t6uO9/n2efMffLOnUhLWAFIEwBpAiBNAKQJgLSpKRB8BCsAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYC0/wIAAP//U+zp/GdaWvwAAAAASUVORK5CYII="},
	{[]byte("z.83234."), "jay", "562450", "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAFfUlEQVR4nOzdQU4lNxRA0RD1/rdM5v0zsEr2c8E9ZwwU/dGV1U8u+8/39/c/UPXv7V8AbhIAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCkCYA0AZAmANIEQJoASBMAaQIgTQCk/Tn0c7++vg795BUrJ/6e+w0/n/75rJWvmXzW3U9sxaFTnK0ApAmANAGQJgDSBEDaqSnQp3N3Ma1MJ1a+5tkk5Nk8Z3KiMjnv2mXs87ECkCYA0gRAmgBIEwBpc1OgT7t2v+z6rnM7ZJ79zs+mSbt2/jwz+TfdwgpAmgBIEwBpAiBNAKTdnALd9bbdOJ+TkMlZzcU5zF1WANIEQJoASBMAaQIgrTIFerZn5tn05txbY7v2Qd094edVrACkCYA0AZAmANIEQNrNKdDk/pNz75GtfNfkzOfuPp8ft6fICkCaAEgTAGkCIE0ApM1Nge7uP5mcsfzWr/n0C/YUWQFIEwBpAiBNAKQJgLSvH7d545xdb3L91pvifyUrAGkCIE0ApAmANAGQdmoK9BP3sZw7P2fXNOnT2+7kOve3OMQKQJoASBMAaQIgTQCkvetcoGfTgHMzlrvOnQ797FmTn+rYXMgKQJoASBMAaQIgTQCkvf2OsHP7he7ewPW2U3fO/dtffkOZFYA0AZAmANIEQJoASJs7F+jc//3P7XW5O6uZ3FczeXLRq1gBSBMAaQIgTQCkCYC0m+cC7fo5b5vD3J26TDp35o83wmCCAEgTAGkCIE0ApL39jbAV5/bMrHzN3TOcJ28E2zWVetUNZVYA0gRAmgBIEwBpAiBtbgr07LSct92oPultu2jOfT4XP2crAGkCIE0ApAmANAGQ9q6b4j/d3bXyaXLf0crT786p3nbj/ANWANIEQJoASBMAaQIg7e03xd/d+XPuBOln85zJE4d2TZwm31l7wApAmgBIEwBpAiBNAKTdnAK9f+qyYtdEZde//dnX7Jq/PXNxLmQFIE0ApAmANAGQJgDSTk2Bds0iJt8jW7HrLOi799Tv+uus/D5ve4vtL1YA0gRAmgBIEwBpAiDt1LlA//OkY/OByfvKV55+bh/L22YsF+/22sUKQJoASBMAaQIgTQCkndoLdO7W9WfP2uXumTZ3J07nXNzfZQUgTQCkCYA0AZAmANJuvhH2afKkoLsnDt29vX1yD8/Fk59XWAFIEwBpAiBNAKQJgLS5vUDn9rGcu/Hq3Ltmz37Oytfc/QxXfh/nAsFbCIA0AZAmANIEQNrcXqBze2+embyTa/Lk510zlsmb4le+6xArAGkCIE0ApAmANAGQdup06LunMa941XtJw3uKVr5rl7d9zn+xApAmANIEQJoASBMAaXN3hN01eeLQp8n30Vb81rfzHrACkCYA0gRAmgBIEwBpc3uBJp0bbU3uO7q7q+fZpOjH7SmyApAmANIEQJoASBMAaafOBfr0tsnM2+YVu+7Wn9zDs+Llm82sAKQJgDQBkCYA0gRA2twU6NPdfTUrP/nceci79tWc+wx3Tckmb4t7wApAmgBIEwBpAiBNAKTdnAJNmjxT+vMnn3tLa+Xp525VO/f0sbmQFYA0AZAmANIEQJoASKtMgSbPKZo8LWfX08/tsFpx8ROzApAmANIEQJoASBMAaTenQJMnxux61rM9KitTjnNvYD37fZ79u57xRhjcIQDSBECaAEgTAGlzU6C7t4bt2g8zeXf83Xvq756e7Y0wmCAA0gRAmgBIEwBpp26Khx/BCkCaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIO2/AAAA///ip/MsGhD5HQAAAABJRU5ErkJggg=="},
}

func TestSecret(t *testing.T) {
	first := Secret()
	if first == "" {
		t.Error("Secret should not be empty")
	}

	second := Secret()
	if second == "" {
		t.Error("Secret should not be empty")
	}
	if first == second {
		t.Error("Secret should be random on each call")
	}
}

func TestGenerate(t *testing.T) {
	for _, x := range tests {
		if png, err := Generate(x.account, base32.StdEncoding.EncodeToString(x.secret)); err == nil {
			if png != x.base64 {
				t.Errorf("Generation for %s (secret: %s) returned unexpected base64 of %s", x.account, x.secret, png)
			}
		}
	}
}

func TestAuthenticate(t *testing.T) {
	for _, x := range tests {
		if ok, err := Authenticate(x.token, base32.StdEncoding.EncodeToString(x.secret)); err == nil {
			if ok {
				t.Errorf("Authentication for %s (secret: %s) with token %s expected to pass", x.account, x.secret, x.token)
			}
		}
	}
}

func TestEmailSuccess(t *testing.T) {
	os.Clearenv()
	if err := os.Setenv("EQIP_SMTP_API_KEY", "SANDBOX_SUCCESS"); err != nil {
		t.Errorf("Failed to set EQIP_SMTP_API_KEY environment variable: %v", err)
	}

	if err := Email("test@mail.gov", base32.StdEncoding.EncodeToString([]byte("secret"))); err != nil {
		t.Errorf("Failed to send email: %v", err)
	}
}

func TestEmailError(t *testing.T) {
	os.Clearenv()
	if err := os.Setenv("EQIP_SMTP_API_KEY", "SANDBOX_ERROR"); err != nil {
		t.Errorf("Failed to set EQIP_SMTP_API_KEY environment variable: %v", err)
	}

	if err := Email("test@mail.gov", base32.StdEncoding.EncodeToString([]byte("secret"))); err == nil {
		t.Error("Expected an error but received none")
	}
}

func TestEmailCloudFoundry(t *testing.T) {
	os.Clearenv()
	if err := os.Setenv("VCAP_SERVICES", `{ "user-provided": [{ "credentials": { "api_key": "SANDBOX_SUCCESS" }, "label": "user-provided", "name": "eqip-smtp" }] }`); err != nil {
		t.Errorf("Failed to set VCAP_SERVICES environment variable: %v", err)
	}

	if err := Email("test@mail.gov", base32.StdEncoding.EncodeToString([]byte("secret"))); err != nil {
		t.Errorf("Failed to send email: %v", err)
	}
}
