/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';let readConfig = (() => {var _ref = _asyncToGenerator(








  function* (argv, packageRoot) {
    const rawConfig = yield readRawConfig(argv, packageRoot);var _normalize =
    normalize(rawConfig, argv);const config = _normalize.config,hasDeprecationWarnings = _normalize.hasDeprecationWarnings;
    return {
      config: Object.freeze(setFromArgv(config, argv)),
      hasDeprecationWarnings };

  });return function readConfig(_x, _x2) {return _ref.apply(this, arguments);};})();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}const path = require('path');const loadFromFile = require('./loadFromFile');const loadFromPackage = require('./loadFromPackage');const normalize = require('./normalize');const setFromArgv = require('./setFromArgv');var _require = require('./utils');const getTestEnvironment = _require.getTestEnvironment;

const parseConfig = argv => {
  if (argv.config && typeof argv.config === 'string') {
    // If the passed in value looks like JSON, treat it as an object.
    if (argv.config[0] === '{' && argv.config[argv.config.length - 1] === '}') {
      return JSON.parse(argv.config);
    }
  }
  return argv.config;
};

const readRawConfig = (argv, root) => {
  const rawConfig = parseConfig(argv);

  if (typeof rawConfig === 'string') {
    return loadFromFile(path.resolve(process.cwd(), rawConfig));
  }

  if (typeof rawConfig === 'object') {
    const config = Object.assign({}, rawConfig);
    config.rootDir = config.rootDir || root;
    return Promise.resolve(config);
  }

  return loadFromPackage(root).then(config => config || { rootDir: root });
};

module.exports = {
  getTestEnvironment,
  normalize,
  readConfig };