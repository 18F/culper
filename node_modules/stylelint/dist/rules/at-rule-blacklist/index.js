"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (blacklistInput) {
  // To allow for just a string as a parameter (not only arrays of strings)
  var blacklist = [].concat(blacklistInput);
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: blacklist,
      possible: [_lodash.isString]
    });
    if (!validOptions) {
      return;
    }

    root.walkAtRules(function (atRule) {
      var name = atRule.name;

      if (blacklist.indexOf(_postcss.vendor.unprefixed(name).toLowerCase()) === -1) {
        return;
      }

      (0, _utils.report)({
        message: messages.rejected(name),
        node: atRule,
        result: result,
        ruleName: ruleName
      });
    });
  };
};

var _lodash = require("lodash");

var _postcss = require("postcss");

var _utils = require("../../utils");

var ruleName = exports.ruleName = "at-rule-blacklist";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: function rejected(name) {
    return "Unexpected at-rule \"" + name + "\"";
  }
});