// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The employment additional activity component renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="activity"
  >
    <BranchCollection
      List={Object {}}
      appendContent={null}
      appendLabel="Add additional periods"
      appendSize="h4"
      branchClassName=""
      branchName="branchcollection"
      content={null}
      employmentFromDate={
        Object {
          "day": "15",
          "month": "4",
          "year": "2019",
        }
      }
      help=""
      items={Array []}
      label="Do you have any additional periods of activity to add?"
      labelSize="h4"
      onError={[Function]}
      onUpdate={[Function]}
      removable={true}
      scrollToBottom=""
      valueKey="Has"
    >
      <AccordionItem
        bind={true}
        defaultState={true}
        dispatch={[Function]}
        name="Item"
        onError={[Function]}
        onUpdate={[Function]}
        required={false}
        scrollIntoView={false}
      >
        <Field
          adjustFor="labels"
          className=""
          comments={false}
          commentsActive={false}
          commentsAdd="comments.add"
          commentsName="Comments"
          commentsRemove="comments.remove"
          commentsRequired={false}
          commentsValue={Object {}}
          errorPrefix=""
          errors={Array []}
          filterErrors={[Function]}
          help=""
          helpActive={false}
          optional={false}
          optionalText=""
          scrollIntoView={true}
          shrink={false}
          title="Provide position title"
          titleSize="h4"
          validate={true}
        >
          <Text
            bind={true}
            className="text"
            label="Position"
            name="Position"
            onError={[Function]}
            onUpdate={[Function]}
            prefilter={[Function]}
            prefix=""
            required={false}
            status={true}
            value=""
          />
        </Field>
        <Field
          adjustFor="labels"
          className=""
          comments={false}
          commentsActive={false}
          commentsAdd="comments.add"
          commentsName="Comments"
          commentsRemove="comments.remove"
          commentsRequired={false}
          commentsValue={Object {}}
          errorPrefix=""
          errors={Array []}
          filterErrors={[Function]}
          help=""
          helpActive={false}
          optional={false}
          optionalText=""
          scrollIntoView={true}
          shrink={false}
          title="Provide supervisor"
          titleSize="h4"
          validate={true}
        >
          <Text
            bind={true}
            className="text"
            label="Supervisor"
            name="Supervisor"
            onError={[Function]}
            onUpdate={[Function]}
            prefilter={[Function]}
            prefix=""
            required={false}
            status={true}
            value=""
          />
        </Field>
        <Field
          adjustFor="daterange"
          className=""
          comments={false}
          commentsActive={false}
          commentsAdd="comments.add"
          commentsName="Comments"
          commentsRemove="comments.remove"
          commentsRequired={false}
          commentsValue={Object {}}
          errorPrefix=""
          errors={Array []}
          filterErrors={[Function]}
          help="history.employment.default.additionalActivity.datesEmployed.help"
          helpActive={false}
          optional={false}
          optionalText=""
          scrollIntoView={true}
          shrink={true}
          title="Provide dates of employment"
          titleSize="h4"
          validate={true}
        >
          <DateRange
            allowPresent={false}
            bind={true}
            dateRangePrefix="additionalActivity"
            disabled={false}
            from={
              Object {
                "touched": false,
              }
            }
            maxDate={
              Object {
                "day": "15",
                "month": "4",
                "year": "2019",
              }
            }
            maxDateEqualTo={true}
            minDate={null}
            minDateEqualTo={true}
            name="DatesEmployed"
            onError={[Function]}
            prefix=""
            present={false}
            relationship=""
            to={
              Object {
                "touched": false,
              }
            }
          />
        </Field>
      </AccordionItem>
    </BranchCollection>
  </div>,
  "nodes": Array [
    <div
      className="activity"
    >
      <BranchCollection
        List={Object {}}
        appendContent={null}
        appendLabel="Add additional periods"
        appendSize="h4"
        branchClassName=""
        branchName="branchcollection"
        content={null}
        employmentFromDate={
          Object {
            "day": "15",
            "month": "4",
            "year": "2019",
          }
        }
        help=""
        items={Array []}
        label="Do you have any additional periods of activity to add?"
        labelSize="h4"
        onError={[Function]}
        onUpdate={[Function]}
        removable={true}
        scrollToBottom=""
        valueKey="Has"
      >
        <AccordionItem
          bind={true}
          defaultState={true}
          dispatch={[Function]}
          name="Item"
          onError={[Function]}
          onUpdate={[Function]}
          required={false}
          scrollIntoView={false}
        >
          <Field
            adjustFor="labels"
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide position title"
            titleSize="h4"
            validate={true}
          >
            <Text
              bind={true}
              className="text"
              label="Position"
              name="Position"
              onError={[Function]}
              onUpdate={[Function]}
              prefilter={[Function]}
              prefix=""
              required={false}
              status={true}
              value=""
            />
          </Field>
          <Field
            adjustFor="labels"
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide supervisor"
            titleSize="h4"
            validate={true}
          >
            <Text
              bind={true}
              className="text"
              label="Supervisor"
              name="Supervisor"
              onError={[Function]}
              onUpdate={[Function]}
              prefilter={[Function]}
              prefix=""
              required={false}
              status={true}
              value=""
            />
          </Field>
          <Field
            adjustFor="daterange"
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="history.employment.default.additionalActivity.datesEmployed.help"
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={true}
            title="Provide dates of employment"
            titleSize="h4"
            validate={true}
          >
            <DateRange
              allowPresent={false}
              bind={true}
              dateRangePrefix="additionalActivity"
              disabled={false}
              from={
                Object {
                  "touched": false,
                }
              }
              maxDate={
                Object {
                  "day": "15",
                  "month": "4",
                  "year": "2019",
                }
              }
              maxDateEqualTo={true}
              minDate={null}
              minDateEqualTo={true}
              name="DatesEmployed"
              onError={[Function]}
              prefix=""
              present={false}
              relationship=""
              to={
                Object {
                  "touched": false,
                }
              }
            />
          </Field>
        </AccordionItem>
      </BranchCollection>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <AdditionalActivity
        List={Object {}}
        employmentFromDate={
          Object {
            "day": "15",
            "month": "4",
            "year": "2019",
          }
        }
        onError={[Function]}
        onUpdate={[Function]}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": AdditionalActivity {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleBlur": [Function],
        "handleChange": [Function],
        "handleFocus": [Function],
        "handleKeyDown": [Function],
        "handleValidation": [Function],
        "props": Object {
          "List": Object {},
          "employmentFromDate": Object {
            "day": "15",
            "month": "4",
            "year": "2019",
          },
          "onError": [Function],
          "onUpdate": [Function],
        },
        "refs": Object {},
        "state": null,
        "updateBranch": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="activity"
        >
          <BranchCollection
            List={Object {}}
            appendContent={null}
            appendLabel="Add additional periods"
            appendSize="h4"
            branchClassName=""
            branchName="branchcollection"
            content={null}
            employmentFromDate={
              Object {
                "day": "15",
                "month": "4",
                "year": "2019",
              }
            }
            help=""
            items={Array []}
            label="Do you have any additional periods of activity to add?"
            labelSize="h4"
            onError={[Function]}
            onUpdate={[Function]}
            removable={true}
            scrollToBottom=""
            valueKey="Has"
          >
            <AccordionItem
              bind={true}
              defaultState={true}
              dispatch={[Function]}
              name="Item"
              onError={[Function]}
              onUpdate={[Function]}
              required={false}
              scrollIntoView={false}
            >
              <Field
                adjustFor="labels"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help=""
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={false}
                title="Provide position title"
                titleSize="h4"
                validate={true}
              >
                <Text
                  bind={true}
                  className="text"
                  label="Position"
                  name="Position"
                  onError={[Function]}
                  onUpdate={[Function]}
                  prefilter={[Function]}
                  prefix=""
                  required={false}
                  status={true}
                  value=""
                />
              </Field>
              <Field
                adjustFor="labels"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help=""
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={false}
                title="Provide supervisor"
                titleSize="h4"
                validate={true}
              >
                <Text
                  bind={true}
                  className="text"
                  label="Supervisor"
                  name="Supervisor"
                  onError={[Function]}
                  onUpdate={[Function]}
                  prefilter={[Function]}
                  prefix=""
                  required={false}
                  status={true}
                  value=""
                />
              </Field>
              <Field
                adjustFor="daterange"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help="history.employment.default.additionalActivity.datesEmployed.help"
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={true}
                title="Provide dates of employment"
                titleSize="h4"
                validate={true}
              >
                <DateRange
                  allowPresent={false}
                  bind={true}
                  dateRangePrefix="additionalActivity"
                  disabled={false}
                  from={
                    Object {
                      "touched": false,
                    }
                  }
                  maxDate={
                    Object {
                      "day": "15",
                      "month": "4",
                      "year": "2019",
                    }
                  }
                  maxDateEqualTo={true}
                  minDate={null}
                  minDateEqualTo={true}
                  name="DatesEmployed"
                  onError={[Function]}
                  prefix=""
                  present={false}
                  relationship=""
                  to={
                    Object {
                      "touched": false,
                    }
                  }
                />
              </Field>
            </AccordionItem>
          </BranchCollection>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="activity"
        >
          <BranchCollection
            List={Object {}}
            appendContent={null}
            appendLabel="Add additional periods"
            appendSize="h4"
            branchClassName=""
            branchName="branchcollection"
            content={null}
            employmentFromDate={
              Object {
                "day": "15",
                "month": "4",
                "year": "2019",
              }
            }
            help=""
            items={Array []}
            label="Do you have any additional periods of activity to add?"
            labelSize="h4"
            onError={[Function]}
            onUpdate={[Function]}
            removable={true}
            scrollToBottom=""
            valueKey="Has"
          >
            <AccordionItem
              bind={true}
              defaultState={true}
              dispatch={[Function]}
              name="Item"
              onError={[Function]}
              onUpdate={[Function]}
              required={false}
              scrollIntoView={false}
            >
              <Field
                adjustFor="labels"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help=""
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={false}
                title="Provide position title"
                titleSize="h4"
                validate={true}
              >
                <Text
                  bind={true}
                  className="text"
                  label="Position"
                  name="Position"
                  onError={[Function]}
                  onUpdate={[Function]}
                  prefilter={[Function]}
                  prefix=""
                  required={false}
                  status={true}
                  value=""
                />
              </Field>
              <Field
                adjustFor="labels"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help=""
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={false}
                title="Provide supervisor"
                titleSize="h4"
                validate={true}
              >
                <Text
                  bind={true}
                  className="text"
                  label="Supervisor"
                  name="Supervisor"
                  onError={[Function]}
                  onUpdate={[Function]}
                  prefilter={[Function]}
                  prefix=""
                  required={false}
                  status={true}
                  value=""
                />
              </Field>
              <Field
                adjustFor="daterange"
                className=""
                comments={false}
                commentsActive={false}
                commentsAdd="comments.add"
                commentsName="Comments"
                commentsRemove="comments.remove"
                commentsRequired={false}
                commentsValue={Object {}}
                errorPrefix=""
                errors={Array []}
                filterErrors={[Function]}
                help="history.employment.default.additionalActivity.datesEmployed.help"
                helpActive={false}
                optional={false}
                optionalText=""
                scrollIntoView={true}
                shrink={true}
                title="Provide dates of employment"
                titleSize="h4"
                validate={true}
              >
                <DateRange
                  allowPresent={false}
                  bind={true}
                  dateRangePrefix="additionalActivity"
                  disabled={false}
                  from={
                    Object {
                      "touched": false,
                    }
                  }
                  maxDate={
                    Object {
                      "day": "15",
                      "month": "4",
                      "year": "2019",
                    }
                  }
                  maxDateEqualTo={true}
                  minDate={null}
                  minDateEqualTo={true}
                  name="DatesEmployed"
                  onError={[Function]}
                  prefix=""
                  present={false}
                  relationship=""
                  to={
                    Object {
                      "touched": false,
                    }
                  }
                />
              </Field>
            </AccordionItem>
          </BranchCollection>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <AdditionalActivity
    List={Object {}}
    employmentFromDate={
      Object {
        "day": "15",
        "month": "4",
        "year": "2019",
      }
    }
    onError={[Function]}
    onUpdate={[Function]}
  />,
}
`;
