// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Education component renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="section-content education"
    data-section="history"
    data-subsection="education"
  >
    <Accordion
      appendClass=""
      appendHelp={null}
      appendLabel="Add another school"
      appendMessage={null}
      appendTitle="Do you have additional education (include education within the last 10 years, as well as degrees or diplomas more than 10 years ago)?"
      branch={Object {}}
      byline={[Function]}
      caption={null}
      className=""
      closeLabel="Close"
      customDetails={[Function]}
      customSummary={[Function]}
      defaultState={true}
      description="Summary of education"
      incomplete="There is a problem with this item, please open it and fix the issue(s)."
      initial={true}
      inject={[Function]}
      items={Array []}
      minimum={1}
      onError={[Function]}
      onUpdate={[Function]}
      openLabel="Open"
      realtime={false}
      removeLabel="Remove"
      scrollIntoView={false}
      scrollToBottom=""
      scrollToTop=""
      skipWarning={false}
      sort={null}
      summary={[Function]}
      timeout={500}
      transformer={[Function]}
      validator={[Function]}
    >
      <EducationItem
        Address={Object {}}
        Comments={Object {}}
        Dates={Object {}}
        Diplomas={
          Object {
            "items": Array [],
          }
        }
        Name={Object {}}
        ReferenceAddress={Object {}}
        ReferenceEmail={Object {}}
        ReferenceEmailNotApplicable={Object {}}
        ReferenceName={Object {}}
        ReferenceNameNotApplicable={Object {}}
        ReferencePhone={Object {}}
        Type={Object {}}
        bind={true}
        dispatch={[Function]}
        name="Item"
        onError={[Function]}
        onUpdate={[Function]}
        scrollIntoView={false}
      />
    </Accordion>
  </div>,
  "nodes": Array [
    <div
      className="section-content education"
      data-section="history"
      data-subsection="education"
    >
      <Accordion
        appendClass=""
        appendHelp={null}
        appendLabel="Add another school"
        appendMessage={null}
        appendTitle="Do you have additional education (include education within the last 10 years, as well as degrees or diplomas more than 10 years ago)?"
        branch={Object {}}
        byline={[Function]}
        caption={null}
        className=""
        closeLabel="Close"
        customDetails={[Function]}
        customSummary={[Function]}
        defaultState={true}
        description="Summary of education"
        incomplete="There is a problem with this item, please open it and fix the issue(s)."
        initial={true}
        inject={[Function]}
        items={Array []}
        minimum={1}
        onError={[Function]}
        onUpdate={[Function]}
        openLabel="Open"
        realtime={false}
        removeLabel="Remove"
        scrollIntoView={false}
        scrollToBottom=""
        scrollToTop=""
        skipWarning={false}
        sort={null}
        summary={[Function]}
        timeout={500}
        transformer={[Function]}
        validator={[Function]}
      >
        <EducationItem
          Address={Object {}}
          Comments={Object {}}
          Dates={Object {}}
          Diplomas={
            Object {
              "items": Array [],
            }
          }
          Name={Object {}}
          ReferenceAddress={Object {}}
          ReferenceEmail={Object {}}
          ReferenceEmailNotApplicable={Object {}}
          ReferenceName={Object {}}
          ReferenceNameNotApplicable={Object {}}
          ReferencePhone={Object {}}
          Type={Object {}}
          bind={true}
          dispatch={[Function]}
          name="Item"
          onError={[Function]}
          onUpdate={[Function]}
          scrollIntoView={false}
        />
      </Accordion>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Education
        List={
          Object {
            "branch": Object {},
            "items": Array [],
          }
        }
        caption={null}
        defaultState={true}
        dispatch={[Function]}
        onError={[Function]}
        onUpdate={[Function]}
        overrideInitial={false}
        realtime={false}
        scrollIntoView={false}
        scrollToTop=""
        section="history"
        sort={null}
        subsection="education"
        totalYears={10}
        validator={[Function]}
      />,
      "_debugID": 381,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Education {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "customEducationByline": [Function],
        "handleCompletion": [Function],
        "handleError": [Function],
        "props": Object {
          "List": Object {
            "branch": Object {},
            "items": Array [],
          },
          "caption": null,
          "defaultState": true,
          "dispatch": [Function],
          "onError": [Function],
          "onUpdate": [Function],
          "overrideInitial": false,
          "realtime": false,
          "scrollIntoView": false,
          "scrollToTop": "",
          "section": "history",
          "sort": null,
          "subsection": "education",
          "totalYears": 10,
          "validator": [Function],
        },
        "refs": Object {},
        "section": "history",
        "state": null,
        "store": "History",
        "storeKey": "Education",
        "subsection": "education",
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="section-content education"
          data-section="history"
          data-subsection="education"
        >
          <Accordion
            appendClass=""
            appendHelp={null}
            appendLabel="Add another school"
            appendMessage={null}
            appendTitle="Do you have additional education (include education within the last 10 years, as well as degrees or diplomas more than 10 years ago)?"
            branch={Object {}}
            byline={[Function]}
            caption={null}
            className=""
            closeLabel="Close"
            customDetails={[Function]}
            customSummary={[Function]}
            defaultState={true}
            description="Summary of education"
            incomplete="There is a problem with this item, please open it and fix the issue(s)."
            initial={true}
            inject={[Function]}
            items={Array []}
            minimum={1}
            onError={[Function]}
            onUpdate={[Function]}
            openLabel="Open"
            realtime={false}
            removeLabel="Remove"
            scrollIntoView={false}
            scrollToBottom=""
            scrollToTop=""
            skipWarning={false}
            sort={null}
            summary={[Function]}
            timeout={500}
            transformer={[Function]}
            validator={[Function]}
          >
            <EducationItem
              Address={Object {}}
              Comments={Object {}}
              Dates={Object {}}
              Diplomas={
                Object {
                  "items": Array [],
                }
              }
              Name={Object {}}
              ReferenceAddress={Object {}}
              ReferenceEmail={Object {}}
              ReferenceEmailNotApplicable={Object {}}
              ReferenceName={Object {}}
              ReferenceNameNotApplicable={Object {}}
              ReferencePhone={Object {}}
              Type={Object {}}
              bind={true}
              dispatch={[Function]}
              name="Item"
              onError={[Function]}
              onUpdate={[Function]}
              scrollIntoView={false}
            />
          </Accordion>
        </div>,
        "_debugID": 382,
        "_renderedOutput": <div
          className="section-content education"
          data-section="history"
          data-subsection="education"
        >
          <Accordion
            appendClass=""
            appendHelp={null}
            appendLabel="Add another school"
            appendMessage={null}
            appendTitle="Do you have additional education (include education within the last 10 years, as well as degrees or diplomas more than 10 years ago)?"
            branch={Object {}}
            byline={[Function]}
            caption={null}
            className=""
            closeLabel="Close"
            customDetails={[Function]}
            customSummary={[Function]}
            defaultState={true}
            description="Summary of education"
            incomplete="There is a problem with this item, please open it and fix the issue(s)."
            initial={true}
            inject={[Function]}
            items={Array []}
            minimum={1}
            onError={[Function]}
            onUpdate={[Function]}
            openLabel="Open"
            realtime={false}
            removeLabel="Remove"
            scrollIntoView={false}
            scrollToBottom=""
            scrollToTop=""
            skipWarning={false}
            sort={null}
            summary={[Function]}
            timeout={500}
            transformer={[Function]}
            validator={[Function]}
          >
            <EducationItem
              Address={Object {}}
              Comments={Object {}}
              Dates={Object {}}
              Diplomas={
                Object {
                  "items": Array [],
                }
              }
              Name={Object {}}
              ReferenceAddress={Object {}}
              ReferenceEmail={Object {}}
              ReferenceEmailNotApplicable={Object {}}
              ReferenceName={Object {}}
              ReferenceNameNotApplicable={Object {}}
              ReferencePhone={Object {}}
              Type={Object {}}
              bind={true}
              dispatch={[Function]}
              name="Item"
              onError={[Function]}
              onUpdate={[Function]}
              scrollIntoView={false}
            />
          </Accordion>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Education
    List={
      Object {
        "branch": Object {},
        "items": Array [],
      }
    }
    caption={null}
    defaultState={true}
    dispatch={[Function]}
    onError={[Function]}
    onUpdate={[Function]}
    overrideInitial={false}
    realtime={false}
    scrollIntoView={false}
    scrollToTop=""
    section="history"
    sort={null}
    subsection="education"
    totalYears={10}
    validator={[Function]}
  />,
}
`;
