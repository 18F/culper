// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ApplicantBirthPlace component renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="section-content applicant-birthplace"
    data-section="identification"
    data-subsection="birthplace"
  >
    <h1
      className="section-header"
    >
      Place of birth
    </h1>
    <Field
      adjustFor=""
      className=""
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help=""
      helpActive={false}
      optional={false}
      optionalText=""
      scrollIntoView={true}
      shrink={false}
      title="Provide your place of birth"
      titleSize="h4"
      validate={true}
    >
      <Location
        addressBook=""
        addressBooks={Object {}}
        cityLabel="City"
        countryLabel="Country"
        countyLabel="County or province"
        dispatch={[Function]}
        geocode={false}
        geocodeResult={Object {}}
        label="Were you born in the United States?"
        layout="Birthplace"
        name="birthplace"
        onError={[Function]}
        onUpdate={[Function]}
        required={false}
        spinner={false}
        stateLabel="State or territory"
        street2Label="Apt, suite, building, floor, etc."
        streetLabel="Street address"
        suggestions={false}
        validated={false}
        zipcodeLabel="ZIP Code"
      />
    </Field>
  </div>,
  "nodes": Array [
    <div
      className="section-content applicant-birthplace"
      data-section="identification"
      data-subsection="birthplace"
    >
      <h1
        className="section-header"
      >
        Place of birth
      </h1>
      <Field
        adjustFor=""
        className=""
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help=""
        helpActive={false}
        optional={false}
        optionalText=""
        scrollIntoView={true}
        shrink={false}
        title="Provide your place of birth"
        titleSize="h4"
        validate={true}
      >
        <Location
          addressBook=""
          addressBooks={Object {}}
          cityLabel="City"
          countryLabel="Country"
          countyLabel="County or province"
          dispatch={[Function]}
          geocode={false}
          geocodeResult={Object {}}
          label="Were you born in the United States?"
          layout="Birthplace"
          name="birthplace"
          onError={[Function]}
          onUpdate={[Function]}
          required={false}
          spinner={false}
          stateLabel="State or territory"
          street2Label="Apt, suite, building, floor, etc."
          streetLabel="Street address"
          suggestions={false}
          validated={false}
          zipcodeLabel="ZIP Code"
        />
      </Field>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ApplicantBirthPlace
        Location={Object {}}
        dispatch={[Function]}
        onError={[Function]}
        onUpdate={[Function]}
        validator={[Function]}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ApplicantBirthPlace {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleCompletion": [Function],
        "handleError": [Function],
        "props": Object {
          "Location": Object {},
          "dispatch": [Function],
          "onError": [Function],
          "onUpdate": [Function],
          "validator": [Function],
        },
        "refs": Object {},
        "section": "identification",
        "state": null,
        "store": "Identification",
        "storeKey": "ApplicantBirthPlace",
        "subsection": "birthplace",
        "update": [Function],
        "updateLocation": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="section-content applicant-birthplace"
          data-section="identification"
          data-subsection="birthplace"
        >
          <h1
            className="section-header"
          >
            Place of birth
          </h1>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide your place of birth"
            titleSize="h4"
            validate={true}
          >
            <Location
              addressBook=""
              addressBooks={Object {}}
              cityLabel="City"
              countryLabel="Country"
              countyLabel="County or province"
              dispatch={[Function]}
              geocode={false}
              geocodeResult={Object {}}
              label="Were you born in the United States?"
              layout="Birthplace"
              name="birthplace"
              onError={[Function]}
              onUpdate={[Function]}
              required={false}
              spinner={false}
              stateLabel="State or territory"
              street2Label="Apt, suite, building, floor, etc."
              streetLabel="Street address"
              suggestions={false}
              validated={false}
              zipcodeLabel="ZIP Code"
            />
          </Field>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="section-content applicant-birthplace"
          data-section="identification"
          data-subsection="birthplace"
        >
          <h1
            className="section-header"
          >
            Place of birth
          </h1>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide your place of birth"
            titleSize="h4"
            validate={true}
          >
            <Location
              addressBook=""
              addressBooks={Object {}}
              cityLabel="City"
              countryLabel="Country"
              countyLabel="County or province"
              dispatch={[Function]}
              geocode={false}
              geocodeResult={Object {}}
              label="Were you born in the United States?"
              layout="Birthplace"
              name="birthplace"
              onError={[Function]}
              onUpdate={[Function]}
              required={false}
              spinner={false}
              stateLabel="State or territory"
              street2Label="Apt, suite, building, floor, etc."
              streetLabel="Street address"
              suggestions={false}
              validated={false}
              zipcodeLabel="ZIP Code"
            />
          </Field>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ApplicantBirthPlace
    Location={Object {}}
    dispatch={[Function]}
    onError={[Function]}
    onUpdate={[Function]}
    validator={[Function]}
  />,
}
`;
