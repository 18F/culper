// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ContactInformation component renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="section-content contact"
    data-section="identification"
    data-subsection="contacts"
  >
    <h1
      className="section-header"
    >
      Your contact information
    </h1>
    <Field
      adjustFor=""
      className="no-margin-bottom"
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help="identification.contacts.help.email"
      helpActive={false}
      optional={true}
      optionalText=""
      scrollIntoView={false}
      shrink={false}
      title="Your email addresses"
      titleSize="h3"
      validate={true}
    >
      <ReactMarkdown
        containerTagName="div"
        parserOptions={Object {}}
        renderers={
          Object {
            "link": [Function],
          }
        }
        source="Providing email addresses may assist in the completion of your background investigation. Email addresses may be used as contact method, and identify subject in records."
      />
    </Field>
    <Field
      adjustFor=""
      className=""
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help=""
      helpActive={false}
      optional={true}
      optionalText=""
      scrollIntoView={true}
      shrink={false}
      title="Home email address"
      titleSize="h4"
      validate={true}
    >
      <Email
        autocapitalize={false}
        autocomplete={true}
        autocorrect={false}
        className="email-home"
        name="HomeEmail"
        onError={[Function]}
        onUpdate={[Function]}
        pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
        spellcheck={false}
        value=""
      />
    </Field>
    <Field
      adjustFor=""
      className=""
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help=""
      helpActive={false}
      optional={true}
      optionalText=""
      scrollIntoView={true}
      shrink={false}
      title="Work email address"
      titleSize="h4"
      validate={true}
    >
      <Email
        autocapitalize={false}
        autocomplete={true}
        autocorrect={false}
        className="email-work"
        name="WorkEmail"
        onError={[Function]}
        onUpdate={[Function]}
        pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
        spellcheck={false}
        value=""
      />
    </Field>
    <Field
      adjustFor=""
      className="no-margin-bottom"
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help="identification.contacts.help.phoneNumber"
      helpActive={false}
      optional={true}
      optionalText=""
      scrollIntoView={false}
      shrink={false}
      title="Your phone numbers"
      titleSize="h3"
      validate={true}
    >
      <ReactMarkdown
        containerTagName="div"
        parserOptions={Object {}}
        renderers={
          Object {
            "link": [Function],
          }
        }
        source="Provide three contact numbers. **At least one number is required**. Additional numbers may assist in the completion of your background investigation."
      />
    </Field>
    <Field
      adjustFor=""
      className="hidden"
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={
        Array [
          Object {
            "code": "validPhoneTypes",
            "valid": true,
          },
        ]
      }
      filterErrors={[Function]}
      help=""
      helpActive={false}
      optional={false}
      optionalText=""
      scrollIntoView={true}
      shrink={false}
      title=""
      titleSize="h4"
      validate={true}
    />
    <div
      className=" telephone-collection"
    >
      <Accordion
        appendClass=""
        appendHelp={null}
        appendLabel="Add another phone number"
        appendMessage={null}
        appendTitle=""
        branch={Object {}}
        byline={[Function]}
        caption={null}
        className=""
        closeLabel="Close"
        customDetails={[Function]}
        customSummary={[Function]}
        defaultState={true}
        description="Summary of phone numbers"
        incomplete="There is a problem with this item, please open it and fix the issue(s)."
        initial={true}
        inject={[Function]}
        items={Array []}
        minimum={2}
        onError={[Function]}
        onUpdate={[Function]}
        openLabel="Open"
        realtime={true}
        removeLabel="Remove"
        scrollToBottom=""
        scrollToTop=""
        skipWarning={false}
        sort={null}
        summary={[Function]}
        timeout={500}
        transformer={[Function]}
        validator={[Function]}
      >
        <AccordionItem
          bind={true}
          defaultState={true}
          dispatch={[Function]}
          name="Item"
          onError={[Function]}
          onUpdate={[Function]}
          required={false}
          scrollIntoView={false}
        >
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title=""
            titleSize="h4"
            validate={true}
          >
            <Telephone
              allowNotApplicable={false}
              bind={true}
              extension=""
              name="Telephone"
              noNumber={false}
              number=""
              numberType=""
              onError={[Function]}
              onUpdate={[Function]}
              showNumberType={true}
              showTimeOfDay={true}
              tab={[Function]}
              timeOfDay="Both"
              type="Domestic"
              typeClass="title"
              value=""
            />
          </Field>
        </AccordionItem>
      </Accordion>
    </div>
  </div>,
  "nodes": Array [
    <div
      className="section-content contact"
      data-section="identification"
      data-subsection="contacts"
    >
      <h1
        className="section-header"
      >
        Your contact information
      </h1>
      <Field
        adjustFor=""
        className="no-margin-bottom"
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help="identification.contacts.help.email"
        helpActive={false}
        optional={true}
        optionalText=""
        scrollIntoView={false}
        shrink={false}
        title="Your email addresses"
        titleSize="h3"
        validate={true}
      >
        <ReactMarkdown
          containerTagName="div"
          parserOptions={Object {}}
          renderers={
            Object {
              "link": [Function],
            }
          }
          source="Providing email addresses may assist in the completion of your background investigation. Email addresses may be used as contact method, and identify subject in records."
        />
      </Field>
      <Field
        adjustFor=""
        className=""
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help=""
        helpActive={false}
        optional={true}
        optionalText=""
        scrollIntoView={true}
        shrink={false}
        title="Home email address"
        titleSize="h4"
        validate={true}
      >
        <Email
          autocapitalize={false}
          autocomplete={true}
          autocorrect={false}
          className="email-home"
          name="HomeEmail"
          onError={[Function]}
          onUpdate={[Function]}
          pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
          spellcheck={false}
          value=""
        />
      </Field>
      <Field
        adjustFor=""
        className=""
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help=""
        helpActive={false}
        optional={true}
        optionalText=""
        scrollIntoView={true}
        shrink={false}
        title="Work email address"
        titleSize="h4"
        validate={true}
      >
        <Email
          autocapitalize={false}
          autocomplete={true}
          autocorrect={false}
          className="email-work"
          name="WorkEmail"
          onError={[Function]}
          onUpdate={[Function]}
          pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
          spellcheck={false}
          value=""
        />
      </Field>
      <Field
        adjustFor=""
        className="no-margin-bottom"
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help="identification.contacts.help.phoneNumber"
        helpActive={false}
        optional={true}
        optionalText=""
        scrollIntoView={false}
        shrink={false}
        title="Your phone numbers"
        titleSize="h3"
        validate={true}
      >
        <ReactMarkdown
          containerTagName="div"
          parserOptions={Object {}}
          renderers={
            Object {
              "link": [Function],
            }
          }
          source="Provide three contact numbers. **At least one number is required**. Additional numbers may assist in the completion of your background investigation."
        />
      </Field>
      <Field
        adjustFor=""
        className="hidden"
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={
          Array [
            Object {
              "code": "validPhoneTypes",
              "valid": true,
            },
          ]
        }
        filterErrors={[Function]}
        help=""
        helpActive={false}
        optional={false}
        optionalText=""
        scrollIntoView={true}
        shrink={false}
        title=""
        titleSize="h4"
        validate={true}
      />
      <div
        className=" telephone-collection"
      >
        <Accordion
          appendClass=""
          appendHelp={null}
          appendLabel="Add another phone number"
          appendMessage={null}
          appendTitle=""
          branch={Object {}}
          byline={[Function]}
          caption={null}
          className=""
          closeLabel="Close"
          customDetails={[Function]}
          customSummary={[Function]}
          defaultState={true}
          description="Summary of phone numbers"
          incomplete="There is a problem with this item, please open it and fix the issue(s)."
          initial={true}
          inject={[Function]}
          items={Array []}
          minimum={2}
          onError={[Function]}
          onUpdate={[Function]}
          openLabel="Open"
          realtime={true}
          removeLabel="Remove"
          scrollToBottom=""
          scrollToTop=""
          skipWarning={false}
          sort={null}
          summary={[Function]}
          timeout={500}
          transformer={[Function]}
          validator={[Function]}
        >
          <AccordionItem
            bind={true}
            defaultState={true}
            dispatch={[Function]}
            name="Item"
            onError={[Function]}
            onUpdate={[Function]}
            required={false}
            scrollIntoView={false}
          >
            <Field
              adjustFor=""
              className=""
              comments={false}
              commentsActive={false}
              commentsAdd="comments.add"
              commentsName="Comments"
              commentsRemove="comments.remove"
              commentsRequired={false}
              commentsValue={Object {}}
              errorPrefix=""
              errors={Array []}
              filterErrors={[Function]}
              help=""
              helpActive={false}
              optional={true}
              optionalText=""
              scrollIntoView={true}
              shrink={false}
              title=""
              titleSize="h4"
              validate={true}
            >
              <Telephone
                allowNotApplicable={false}
                bind={true}
                extension=""
                name="Telephone"
                noNumber={false}
                number=""
                numberType=""
                onError={[Function]}
                onUpdate={[Function]}
                showNumberType={true}
                showTimeOfDay={true}
                tab={[Function]}
                timeOfDay="Both"
                type="Domestic"
                typeClass="title"
                value=""
              />
            </Field>
          </AccordionItem>
        </Accordion>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ContactInformation
        HomeEmail={Object {}}
        PhoneNumbers={
          Object {
            "branch": Object {},
            "items": Array [],
          }
        }
        WorkEmail={Object {}}
        defaultState={true}
        dispatch={[Function]}
        minimumPhoneNumbers={1}
        onError={[Function]}
        onUpdate={[Function]}
        shouldFilterEmptyItems={false}
        validator={[Function]}
      />,
      "_debugID": 932,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ContactInformation {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleCompletion": [Function],
        "handleError": [Function],
        "props": Object {
          "HomeEmail": Object {},
          "PhoneNumbers": Object {
            "branch": Object {},
            "items": Array [],
          },
          "WorkEmail": Object {},
          "defaultState": true,
          "dispatch": [Function],
          "minimumPhoneNumbers": 1,
          "onError": [Function],
          "onUpdate": [Function],
          "shouldFilterEmptyItems": false,
          "validator": [Function],
        },
        "refs": Object {},
        "section": "identification",
        "state": null,
        "store": "Identification",
        "storeKey": "Contacts",
        "subsection": "contacts",
        "update": [Function],
        "updateHomeEmail": [Function],
        "updatePhoneNumbers": [Function],
        "updateWorkEmail": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="section-content contact"
          data-section="identification"
          data-subsection="contacts"
        >
          <h1
            className="section-header"
          >
            Your contact information
          </h1>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.contacts.help.email"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={false}
            shrink={false}
            title="Your email addresses"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="Providing email addresses may assist in the completion of your background investigation. Email addresses may be used as contact method, and identify subject in records."
            />
          </Field>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Home email address"
            titleSize="h4"
            validate={true}
          >
            <Email
              autocapitalize={false}
              autocomplete={true}
              autocorrect={false}
              className="email-home"
              name="HomeEmail"
              onError={[Function]}
              onUpdate={[Function]}
              pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
              spellcheck={false}
              value=""
            />
          </Field>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Work email address"
            titleSize="h4"
            validate={true}
          >
            <Email
              autocapitalize={false}
              autocomplete={true}
              autocorrect={false}
              className="email-work"
              name="WorkEmail"
              onError={[Function]}
              onUpdate={[Function]}
              pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
              spellcheck={false}
              value=""
            />
          </Field>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.contacts.help.phoneNumber"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={false}
            shrink={false}
            title="Your phone numbers"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="Provide three contact numbers. **At least one number is required**. Additional numbers may assist in the completion of your background investigation."
            />
          </Field>
          <Field
            adjustFor=""
            className="hidden"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={
              Array [
                Object {
                  "code": "validPhoneTypes",
                  "valid": true,
                },
              ]
            }
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title=""
            titleSize="h4"
            validate={true}
          />
          <div
            className=" telephone-collection"
          >
            <Accordion
              appendClass=""
              appendHelp={null}
              appendLabel="Add another phone number"
              appendMessage={null}
              appendTitle=""
              branch={Object {}}
              byline={[Function]}
              caption={null}
              className=""
              closeLabel="Close"
              customDetails={[Function]}
              customSummary={[Function]}
              defaultState={true}
              description="Summary of phone numbers"
              incomplete="There is a problem with this item, please open it and fix the issue(s)."
              initial={true}
              inject={[Function]}
              items={Array []}
              minimum={2}
              onError={[Function]}
              onUpdate={[Function]}
              openLabel="Open"
              realtime={true}
              removeLabel="Remove"
              scrollToBottom=""
              scrollToTop=""
              skipWarning={false}
              sort={null}
              summary={[Function]}
              timeout={500}
              transformer={[Function]}
              validator={[Function]}
            >
              <AccordionItem
                bind={true}
                defaultState={true}
                dispatch={[Function]}
                name="Item"
                onError={[Function]}
                onUpdate={[Function]}
                required={false}
                scrollIntoView={false}
              >
                <Field
                  adjustFor=""
                  className=""
                  comments={false}
                  commentsActive={false}
                  commentsAdd="comments.add"
                  commentsName="Comments"
                  commentsRemove="comments.remove"
                  commentsRequired={false}
                  commentsValue={Object {}}
                  errorPrefix=""
                  errors={Array []}
                  filterErrors={[Function]}
                  help=""
                  helpActive={false}
                  optional={true}
                  optionalText=""
                  scrollIntoView={true}
                  shrink={false}
                  title=""
                  titleSize="h4"
                  validate={true}
                >
                  <Telephone
                    allowNotApplicable={false}
                    bind={true}
                    extension=""
                    name="Telephone"
                    noNumber={false}
                    number=""
                    numberType=""
                    onError={[Function]}
                    onUpdate={[Function]}
                    showNumberType={true}
                    showTimeOfDay={true}
                    tab={[Function]}
                    timeOfDay="Both"
                    type="Domestic"
                    typeClass="title"
                    value=""
                  />
                </Field>
              </AccordionItem>
            </Accordion>
          </div>
        </div>,
        "_debugID": 933,
        "_renderedOutput": <div
          className="section-content contact"
          data-section="identification"
          data-subsection="contacts"
        >
          <h1
            className="section-header"
          >
            Your contact information
          </h1>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.contacts.help.email"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={false}
            shrink={false}
            title="Your email addresses"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="Providing email addresses may assist in the completion of your background investigation. Email addresses may be used as contact method, and identify subject in records."
            />
          </Field>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Home email address"
            titleSize="h4"
            validate={true}
          >
            <Email
              autocapitalize={false}
              autocomplete={true}
              autocorrect={false}
              className="email-home"
              name="HomeEmail"
              onError={[Function]}
              onUpdate={[Function]}
              pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
              spellcheck={false}
              value=""
            />
          </Field>
          <Field
            adjustFor=""
            className=""
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Work email address"
            titleSize="h4"
            validate={true}
          >
            <Email
              autocapitalize={false}
              autocomplete={true}
              autocorrect={false}
              className="email-work"
              name="WorkEmail"
              onError={[Function]}
              onUpdate={[Function]}
              pattern={/\\^\\(\\[A-z0-9_\\.-\\]\\+\\)@\\(\\[A-z0-9\\.-\\]\\+\\)\\\\\\.\\+\\(\\[A-z\\.\\]\\{2,63\\}\\)\\$/}
              spellcheck={false}
              value=""
            />
          </Field>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.contacts.help.phoneNumber"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={false}
            shrink={false}
            title="Your phone numbers"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="Provide three contact numbers. **At least one number is required**. Additional numbers may assist in the completion of your background investigation."
            />
          </Field>
          <Field
            adjustFor=""
            className="hidden"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={
              Array [
                Object {
                  "code": "validPhoneTypes",
                  "valid": true,
                },
              ]
            }
            filterErrors={[Function]}
            help=""
            helpActive={false}
            optional={false}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title=""
            titleSize="h4"
            validate={true}
          />
          <div
            className=" telephone-collection"
          >
            <Accordion
              appendClass=""
              appendHelp={null}
              appendLabel="Add another phone number"
              appendMessage={null}
              appendTitle=""
              branch={Object {}}
              byline={[Function]}
              caption={null}
              className=""
              closeLabel="Close"
              customDetails={[Function]}
              customSummary={[Function]}
              defaultState={true}
              description="Summary of phone numbers"
              incomplete="There is a problem with this item, please open it and fix the issue(s)."
              initial={true}
              inject={[Function]}
              items={Array []}
              minimum={2}
              onError={[Function]}
              onUpdate={[Function]}
              openLabel="Open"
              realtime={true}
              removeLabel="Remove"
              scrollToBottom=""
              scrollToTop=""
              skipWarning={false}
              sort={null}
              summary={[Function]}
              timeout={500}
              transformer={[Function]}
              validator={[Function]}
            >
              <AccordionItem
                bind={true}
                defaultState={true}
                dispatch={[Function]}
                name="Item"
                onError={[Function]}
                onUpdate={[Function]}
                required={false}
                scrollIntoView={false}
              >
                <Field
                  adjustFor=""
                  className=""
                  comments={false}
                  commentsActive={false}
                  commentsAdd="comments.add"
                  commentsName="Comments"
                  commentsRemove="comments.remove"
                  commentsRequired={false}
                  commentsValue={Object {}}
                  errorPrefix=""
                  errors={Array []}
                  filterErrors={[Function]}
                  help=""
                  helpActive={false}
                  optional={true}
                  optionalText=""
                  scrollIntoView={true}
                  shrink={false}
                  title=""
                  titleSize="h4"
                  validate={true}
                >
                  <Telephone
                    allowNotApplicable={false}
                    bind={true}
                    extension=""
                    name="Telephone"
                    noNumber={false}
                    number=""
                    numberType=""
                    onError={[Function]}
                    onUpdate={[Function]}
                    showNumberType={true}
                    showTimeOfDay={true}
                    tab={[Function]}
                    timeOfDay="Both"
                    type="Domestic"
                    typeClass="title"
                    value=""
                  />
                </Field>
              </AccordionItem>
            </Accordion>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ContactInformation
    HomeEmail={Object {}}
    PhoneNumbers={
      Object {
        "branch": Object {},
        "items": Array [],
      }
    }
    WorkEmail={Object {}}
    defaultState={true}
    dispatch={[Function]}
    minimumPhoneNumbers={1}
    onError={[Function]}
    onUpdate={[Function]}
    shouldFilterEmptyItems={false}
    validator={[Function]}
  />,
}
`;
