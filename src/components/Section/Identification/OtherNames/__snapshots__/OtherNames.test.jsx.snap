// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The OtherNames component renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="section-content other-names"
    data-section="identification"
    data-subsection="othernames"
  >
    <h1
      className="section-header"
    >
      Other names used
    </h1>
    <Field
      adjustFor=""
      className="no-margin-bottom"
      comments={false}
      commentsActive={false}
      commentsAdd="comments.add"
      commentsName="Comments"
      commentsRemove="comments.remove"
      commentsRequired={false}
      commentsValue={Object {}}
      errorPrefix=""
      errors={Array []}
      filterErrors={[Function]}
      help="identification.othernames.branch.help"
      helpActive={false}
      optional={true}
      optionalText=""
      scrollIntoView={true}
      shrink={false}
      title="Provide your other names used and the period of time you used them"
      titleSize="h3"
      validate={true}
    >
      <ReactMarkdown
        containerTagName="div"
        parserOptions={Object {}}
        renderers={
          Object {
            "link": [Function],
          }
        }
        source="For example: your maiden name, name(s) by a former marriage, former name(s), alias(es), or nickname(s)."
      />
    </Field>
    <Branch
      adjustFor="buttons"
      className=""
      confirmation="Are you sure you would like to change your answer? This will remove any data currently entered."
      disabled={false}
      label="Have you used any other names?"
      labelSize="h4"
      name="has_othernames"
      noAriaLabel=""
      noLabel="No"
      noValue="No"
      onError={[Function]}
      onUpdate={[Function]}
      optional={false}
      required={false}
      scrollIntoView={false}
      value=""
      warning={true}
      yesAriaLabel=""
      yesLabel="Yes"
      yesValue="Yes"
    />
    <Show
      when={false}
    >
      <Accordion
        appendClass=""
        appendHelp={null}
        appendLabel="Add another name"
        appendMessage={null}
        appendTitle="Do you have additional names to enter?"
        branch={Object {}}
        byline={[Function]}
        caption={null}
        className=""
        closeLabel="Close"
        customDetails={[Function]}
        customSummary={[Function]}
        defaultState={true}
        description="Summary of other names used"
        incomplete="There is a problem with this item, please open it and fix the issue(s)."
        initial={true}
        inject={[Function]}
        items={Array []}
        minimum={1}
        onError={[Function]}
        onUpdate={[Function]}
        openLabel="Open"
        realtime={true}
        removeLabel="Remove"
        required={false}
        scrollToBottom=""
        scrollToTop=""
        skipWarning={false}
        sort={null}
        summary={[Function]}
        timeout={500}
        titleSize="h4"
        transformer={[Function]}
        validator={[Function]}
      >
        <OtherNameItem
          bind={true}
          name="Item"
          onError={[Function]}
          onUpdate={[Function]}
          required={false}
        />
      </Accordion>
    </Show>
  </div>,
  "nodes": Array [
    <div
      className="section-content other-names"
      data-section="identification"
      data-subsection="othernames"
    >
      <h1
        className="section-header"
      >
        Other names used
      </h1>
      <Field
        adjustFor=""
        className="no-margin-bottom"
        comments={false}
        commentsActive={false}
        commentsAdd="comments.add"
        commentsName="Comments"
        commentsRemove="comments.remove"
        commentsRequired={false}
        commentsValue={Object {}}
        errorPrefix=""
        errors={Array []}
        filterErrors={[Function]}
        help="identification.othernames.branch.help"
        helpActive={false}
        optional={true}
        optionalText=""
        scrollIntoView={true}
        shrink={false}
        title="Provide your other names used and the period of time you used them"
        titleSize="h3"
        validate={true}
      >
        <ReactMarkdown
          containerTagName="div"
          parserOptions={Object {}}
          renderers={
            Object {
              "link": [Function],
            }
          }
          source="For example: your maiden name, name(s) by a former marriage, former name(s), alias(es), or nickname(s)."
        />
      </Field>
      <Branch
        adjustFor="buttons"
        className=""
        confirmation="Are you sure you would like to change your answer? This will remove any data currently entered."
        disabled={false}
        label="Have you used any other names?"
        labelSize="h4"
        name="has_othernames"
        noAriaLabel=""
        noLabel="No"
        noValue="No"
        onError={[Function]}
        onUpdate={[Function]}
        optional={false}
        required={false}
        scrollIntoView={false}
        value=""
        warning={true}
        yesAriaLabel=""
        yesLabel="Yes"
        yesValue="Yes"
      />
      <Show
        when={false}
      >
        <Accordion
          appendClass=""
          appendHelp={null}
          appendLabel="Add another name"
          appendMessage={null}
          appendTitle="Do you have additional names to enter?"
          branch={Object {}}
          byline={[Function]}
          caption={null}
          className=""
          closeLabel="Close"
          customDetails={[Function]}
          customSummary={[Function]}
          defaultState={true}
          description="Summary of other names used"
          incomplete="There is a problem with this item, please open it and fix the issue(s)."
          initial={true}
          inject={[Function]}
          items={Array []}
          minimum={1}
          onError={[Function]}
          onUpdate={[Function]}
          openLabel="Open"
          realtime={true}
          removeLabel="Remove"
          required={false}
          scrollToBottom=""
          scrollToTop=""
          skipWarning={false}
          sort={null}
          summary={[Function]}
          timeout={500}
          titleSize="h4"
          transformer={[Function]}
          validator={[Function]}
        >
          <OtherNameItem
            bind={true}
            name="Item"
            onError={[Function]}
            onUpdate={[Function]}
            required={false}
          />
        </Accordion>
      </Show>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <OtherNames
        HasOtherNames={Object {}}
        List={
          Object {
            "branch": Object {},
            "items": Array [],
          }
        }
        defaultState={true}
        dispatch={[Function]}
        onError={[Function]}
        onUpdate={[Function]}
        required={false}
        validator={[Function]}
      />,
      "_debugID": 457,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": OtherNames {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleCompletion": [Function],
        "handleError": [Function],
        "props": Object {
          "HasOtherNames": Object {},
          "List": Object {
            "branch": Object {},
            "items": Array [],
          },
          "defaultState": true,
          "dispatch": [Function],
          "onError": [Function],
          "onUpdate": [Function],
          "required": false,
          "validator": [Function],
        },
        "refs": Object {},
        "section": "identification",
        "state": null,
        "store": "Identification",
        "storeKey": "OtherNames",
        "subsection": "othernames",
        "update": [Function],
        "updateBranch": [Function],
        "updateList": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="section-content other-names"
          data-section="identification"
          data-subsection="othernames"
        >
          <h1
            className="section-header"
          >
            Other names used
          </h1>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.othernames.branch.help"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide your other names used and the period of time you used them"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="For example: your maiden name, name(s) by a former marriage, former name(s), alias(es), or nickname(s)."
            />
          </Field>
          <Branch
            adjustFor="buttons"
            className=""
            confirmation="Are you sure you would like to change your answer? This will remove any data currently entered."
            disabled={false}
            label="Have you used any other names?"
            labelSize="h4"
            name="has_othernames"
            noAriaLabel=""
            noLabel="No"
            noValue="No"
            onError={[Function]}
            onUpdate={[Function]}
            optional={false}
            required={false}
            scrollIntoView={false}
            value=""
            warning={true}
            yesAriaLabel=""
            yesLabel="Yes"
            yesValue="Yes"
          />
          <Show
            when={false}
          >
            <Accordion
              appendClass=""
              appendHelp={null}
              appendLabel="Add another name"
              appendMessage={null}
              appendTitle="Do you have additional names to enter?"
              branch={Object {}}
              byline={[Function]}
              caption={null}
              className=""
              closeLabel="Close"
              customDetails={[Function]}
              customSummary={[Function]}
              defaultState={true}
              description="Summary of other names used"
              incomplete="There is a problem with this item, please open it and fix the issue(s)."
              initial={true}
              inject={[Function]}
              items={Array []}
              minimum={1}
              onError={[Function]}
              onUpdate={[Function]}
              openLabel="Open"
              realtime={true}
              removeLabel="Remove"
              required={false}
              scrollToBottom=""
              scrollToTop=""
              skipWarning={false}
              sort={null}
              summary={[Function]}
              timeout={500}
              titleSize="h4"
              transformer={[Function]}
              validator={[Function]}
            >
              <OtherNameItem
                bind={true}
                name="Item"
                onError={[Function]}
                onUpdate={[Function]}
                required={false}
              />
            </Accordion>
          </Show>
        </div>,
        "_debugID": 458,
        "_renderedOutput": <div
          className="section-content other-names"
          data-section="identification"
          data-subsection="othernames"
        >
          <h1
            className="section-header"
          >
            Other names used
          </h1>
          <Field
            adjustFor=""
            className="no-margin-bottom"
            comments={false}
            commentsActive={false}
            commentsAdd="comments.add"
            commentsName="Comments"
            commentsRemove="comments.remove"
            commentsRequired={false}
            commentsValue={Object {}}
            errorPrefix=""
            errors={Array []}
            filterErrors={[Function]}
            help="identification.othernames.branch.help"
            helpActive={false}
            optional={true}
            optionalText=""
            scrollIntoView={true}
            shrink={false}
            title="Provide your other names used and the period of time you used them"
            titleSize="h3"
            validate={true}
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="For example: your maiden name, name(s) by a former marriage, former name(s), alias(es), or nickname(s)."
            />
          </Field>
          <Branch
            adjustFor="buttons"
            className=""
            confirmation="Are you sure you would like to change your answer? This will remove any data currently entered."
            disabled={false}
            label="Have you used any other names?"
            labelSize="h4"
            name="has_othernames"
            noAriaLabel=""
            noLabel="No"
            noValue="No"
            onError={[Function]}
            onUpdate={[Function]}
            optional={false}
            required={false}
            scrollIntoView={false}
            value=""
            warning={true}
            yesAriaLabel=""
            yesLabel="Yes"
            yesValue="Yes"
          />
          <Show
            when={false}
          >
            <Accordion
              appendClass=""
              appendHelp={null}
              appendLabel="Add another name"
              appendMessage={null}
              appendTitle="Do you have additional names to enter?"
              branch={Object {}}
              byline={[Function]}
              caption={null}
              className=""
              closeLabel="Close"
              customDetails={[Function]}
              customSummary={[Function]}
              defaultState={true}
              description="Summary of other names used"
              incomplete="There is a problem with this item, please open it and fix the issue(s)."
              initial={true}
              inject={[Function]}
              items={Array []}
              minimum={1}
              onError={[Function]}
              onUpdate={[Function]}
              openLabel="Open"
              realtime={true}
              removeLabel="Remove"
              required={false}
              scrollToBottom=""
              scrollToTop=""
              skipWarning={false}
              sort={null}
              summary={[Function]}
              timeout={500}
              titleSize="h4"
              transformer={[Function]}
              validator={[Function]}
            >
              <OtherNameItem
                bind={true}
                name="Item"
                onError={[Function]}
                onUpdate={[Function]}
                required={false}
              />
            </Accordion>
          </Show>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <OtherNames
    HasOtherNames={Object {}}
    List={
      Object {
        "branch": Object {},
        "items": Array [],
      }
    }
    defaultState={true}
    dispatch={[Function]}
    onError={[Function]}
    onUpdate={[Function]}
    required={false}
    validator={[Function]}
  />,
}
`;
