// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The PackageErrors component with default props renders without errors 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="submission-status invalid"
  >
    <ReactMarkdown
      containerTagName="div"
      parserOptions={Object {}}
      renderers={
        Object {
          "link": [Function],
        }
      }
      source="# Some required fields are incomplete
Please fix the errors listed below."
    />
    <FormStatus
      isTransitioning={false}
      isValid={false}
      onTransitionEnd={[Function]}
      progressWidth={100}
    />
    <div
      className="invalid-form"
    >
      <ReactMarkdown
        containerTagName="div"
        parserOptions={Object {}}
        renderers={
          Object {
            "link": [Function],
          }
        }
        source="### List of incomplete sections
Use the list below to complete all incomplete sections or sections with errors."
      />
    </div>
  </div>,
  "nodes": Array [
    <div
      className="submission-status invalid"
    >
      <ReactMarkdown
        containerTagName="div"
        parserOptions={Object {}}
        renderers={
          Object {
            "link": [Function],
          }
        }
        source="# Some required fields are incomplete
Please fix the errors listed below."
      />
      <FormStatus
        isTransitioning={false}
        isValid={false}
        onTransitionEnd={[Function]}
        progressWidth={100}
      />
      <div
        className="invalid-form"
      >
        <ReactMarkdown
          containerTagName="div"
          parserOptions={Object {}}
          renderers={
            Object {
              "link": [Function],
            }
          }
          source="### List of incomplete sections
Use the list below to complete all incomplete sections or sections with errors."
        />
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <PackageErrors
        formSections={Array []}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "formSections": Array [],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="submission-status invalid"
        >
          <ReactMarkdown
            containerTagName="div"
            parserOptions={Object {}}
            renderers={
              Object {
                "link": [Function],
              }
            }
            source="# Some required fields are incomplete
Please fix the errors listed below."
          />
          <FormStatus
            isTransitioning={false}
            isValid={false}
            onTransitionEnd={[Function]}
            progressWidth={100}
          />
          <div
            className="invalid-form"
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="### List of incomplete sections
Use the list below to complete all incomplete sections or sections with errors."
            />
          </div>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="submission-status invalid"
        >
          <ReactMarkdown
            containerTagName="div"
            parserOptions={Object {}}
            renderers={
              Object {
                "link": [Function],
              }
            }
            source="# Some required fields are incomplete
Please fix the errors listed below."
          />
          <FormStatus
            isTransitioning={false}
            isValid={false}
            onTransitionEnd={[Function]}
            progressWidth={100}
          />
          <div
            className="invalid-form"
          >
            <ReactMarkdown
              containerTagName="div"
              parserOptions={Object {}}
              renderers={
                Object {
                  "link": [Function],
                }
              }
              source="### List of incomplete sections
Use the list below to complete all incomplete sections or sections with errors."
            />
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PackageErrors
    formSections={Array []}
  />,
}
`;
