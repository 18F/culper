@import 'eqip-colors';
@import 'eqip-fonts';

label, input, textarea, select {
  width: 100%;
  max-width: 64rem;
  margin-top: 0;
  color: $eapp-grey-dark;
}

input, textarea, select {
  border-radius: 3px;
}

textarea {
  resize: vertical;
}

/* bring in USWD validation classes and alter for our design */
input[type='text'], textarea, select {
  padding-right: 3rem;
  transition: border-color 0.4s, border-width 0.4s, background-position 0.4s;
}

input[type='checkbox'], input[type='radio'] {
  position: absolute;
  margin-left: 0;
  width: 0;

  + label {
    position: relative;
    top: auto;
    left: auto;

    // This was hiding the time of day for telephone numbers.
    // z-index: -1;
  }
}

/* placeholder should be a light gray and italics */
::-webkit-input-placeholder {
  font-style: italic;
  color: $eapp-grey-placeholder;
}

::-ms-input-placeholder {
  font-style: italic;
  color: $eapp-grey-placeholder;
}

::-moz-placeholder {
  font-style: italic;
  color: $eapp-grey-placeholder;
  opacity: 1;
}

:-moz-placeholder {
  font-style: italic;
  color: $eapp-grey-placeholder;
  opacity: 1;
}

:focus {
  &::-webkit-input-placeholder {
    color: transparent;
  }
  &::-ms-input-placeholder {
    color: transparent;
  }
  &::-moz-placeholder {
    color: transparent;
  }
  &:-moz-placeholder {
    color: transparent;
  }
}

.usa-input-error {
  border: none;
  padding: 0;
  margin-top: 0;
  right: auto;

  /* prevent USWD standards from bolding labels on inputs with errors */
  label {
    font-weight: $eapp-book;
  }

  .usa-input-error-message {
    display: none;
  }

  input[type='text'],
  input[type='number'],
  input[type='email'],
  textarea,
  select {
    background: url('../img/exclamation-point.svg') no-repeat right 0.7rem center / 1.7rem auto;
    box-shadow: none;
    border-width: 2px;
    width: 100%;

    &.usa-input-success {
      box-shadow: none;
      background: url('../img/exclamation-point.svg') no-repeat right 0.7rem center / 1.7rem auto;
      border-width: 2px;
      width: 100%;
    }
  }

  .block > label {
    border: 2px solid #cd2026;
  }
}

input[type='text'],
input[type='number'],
input[type='email'],
textarea,
select {
  background-position: 100% center;

  &:focus {
    // box-shadow: 3px 1px 16px 22px 12px black;
  }

  &.usa-input-success {
    box-shadow: none;
    background: url('../img/checkmark.svg') no-repeat right 0.7rem center / 1.7rem auto;
    border-width: 2px;
    width: 100%;
  }
}

// Block style radio and checkboxes
.blocks {
  line-height: 4.6rem;

  > .block:not(.extended):first-child:nth-last-child(3),
  > .block:not(.extended):first-child:nth-last-child(3) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(4),
  > .block:not(.extended):first-child:nth-last-child(4) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(5),
  > .block:not(.extended):first-child:nth-last-child(5) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(6),
  > .block:not(.extended):first-child:nth-last-child(6) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(7),
  > .block:not(.extended):first-child:nth-last-child(7) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(8),
  > .block:not(.extended):first-child:nth-last-child(8) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(9),
  > .block:not(.extended):first-child:nth-last-child(9) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(10),
  > .block:not(.extended):first-child:nth-last-child(10) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(11),
  > .block:not(.extended):first-child:nth-last-child(11) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(12),
  > .block:not(.extended):first-child:nth-last-child(12) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(13),
  > .block:not(.extended):first-child:nth-last-child(13) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(14),
  > .block:not(.extended):first-child:nth-last-child(14) ~ .block,
  > .block:not(.extended):first-child:nth-last-child(15),
  > .block:not(.extended):first-child:nth-last-child(15) ~ .block {
    label {
      height: 10rem;
      width: 18rem;
    }
  }
}

.block {
  display: inline-block;

  label {
    display: block;
    position: relative;
    top: 0;
    width: 15rem;
    max-width: 64rem;
    min-width: 7.7rem;
    margin-right: 1.6rem;
    margin-top: 0;
    text-align: center;
    background: $eapp-grey-light;
    border: 1px solid $eapp-grey-dark;
    border-radius: 3px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    line-height: 4.6rem !important;
    padding-left: 1rem;
    padding-right: 1rem;
    overflow: hidden;

    input {
      position: absolute;
    }

    &.usa-input-focus {
      outline: 2px dotted #aeb0b5;
      outline-offset: 3px;
    }

    &:hover {
      background-color: #cececf;
    }

    &.checked {
      color: #fff;
      border: 1px solid $eapp-selected;
      background: $eapp-selected;
    }

    &.checked.usa-input-focus,
    &.checked:focus,
    input [type='checkbox'].usa-input-focus,
    input [type='checkbox']:focus {
      outline: 2px dotted #aeb0b5;
      outline-offset: 3px;
    }

    // Configure buttons for handling text in decorative blocks
    > span {
      display: block;
      height: 100%;

      > div {
        position: relative;
        top: 35%;

        > p {
          padding: 0;
        }
      }

      // If this is the first div AND not the last then it
      // has subtext associated to it and needs to be bumped
      // upwards.
      > div:not(:last-of-type) {
        top: 25%;
      }

      // All the div's (except the first) are treated as
      // subtext.
      > div:not(:first-of-type) {
        font-size: smaller;
        margin-top: -3rem;
      }
    }

    // Block style radio and checkboxes that are NOT toggles
    &.no-toggle {
      display: block;
      margin-bottom: 0;
      margin-right: 1.6rem;
      text-align: center;
      background: transparent;
      border: none;
      z-index: unset;

      > span {
        display: inline;
      }
    }

    &.no-toggle.checked,
    &.no-toggle:hover {
      color: initial;
      border: none;
      background: transparent;
    }
  }

  svg path {
    fill: $eapp-grey-darker;
  }

  // Extended blocks are those with content within them such as images or long text.
  &.extended {
    min-width: 12rem;
    line-height: 1;

    i {
      display: none;
    }

    label {
      position: relative !important;
      margin-bottom: 3.3rem;
      height: 7.6rem;
      min-width: 12rem;
      cursor: pointer;
      overflow: visible;

      input[type='checkbox'],
      input[type='radio'] {
        height: 1px;
        width: 1px;
      }

      span {
        display: block;
        position: absolute;
        top: 8rem;
        left: 0;
        width: 100%;
        height: auto;
        line-height: 1.1;
        font-size: 1.7rem;
        color: $eapp-grey-dark;
      }

      .hair-icon,
      .eye-icon,
      .sex-icon,
      .relationship-icon,
      .military-service-icon {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        transition: all 0.3s;
        border-radius: 0;

        svg, img {
          position: absolute;
          top: 1.4rem;
          left: 50%;
          height: 4.6rem;
          width: 4.6rem;
          margin-left: -2.3rem;
          transition: all 0.3s;
        }
      }

      &:hover .hair-icon,
      &.checked .hair-icon,
      &:hover .eye-icon,
      &.checked .eye-icon,
      &:hover .sex-icon,
      &.checked .sex-icon,
      &:hover .relationship-icon,
      &.checked .relationship-icon,
      &:hover .military-service-icon,
      &.checked .military-service-icon {
        border-radius: 50%;
        top: 1.4rem;
        left: 50%;
        width: 4.6rem;
        height: 4.6rem;
        background-color: $eapp-grey-light;
        margin-left: -2.3rem;

        svg, img {
          top: 0.8rem;
          height: 3rem;
          width: 3rem;
          margin-left: -1.5rem;
        }
      }
    }
  }

  &.disabled {
    label {
      cursor: initial;
      background: $eapp-grey-light;

      &.usa-input-focus,
      &.checked,
      &:hover {
        background: $eapp-grey-light;
      }
    }
  }
}

.optional {
  color: $eapp-grey-darker;
  font-style: italic;
  font-family: $eapp-sans;
  font-weight: normal;
  font-size: 1.7rem;
  line-height: 1.6rem;
  padding-left: 0.5rem;
}

.required {
  .title:after,
  > label:after {
    font-family: $eapp-serif;
    font-size: 1.2rem;
    font-weight: normal;
    vertical-align: text-top;
    margin-left: 0.4rem;
    color: #981b1e;
    content: '*';
  }

  // Specifically target labels for the requirement token(s).
  .telephone {
    .numbers > label,
    .phonetype > label {
      &:after {
        font-family: $eapp-serif;
        font-size: 1.2rem;
        font-weight: normal;
        vertical-align: text-top;
        margin-left: 0.4rem;
        color: #981b1e;
        content: '*';
      }
    }
  }

  // This allows the component to handle its own placement of requirement tokens.
  // A use case for this is `<Telephone />`. The field title does not have an required token,
  // but two labels within the component potentially do.
  &.override-required {
    .title:after,
    > label:after {
      content: none;
    }
  }
}
